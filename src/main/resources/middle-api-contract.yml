openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: userMiddle
    description: Operations about user
  - name: vehicleMiddle
    description: Operations about vehicle
  - name: policyMiddle
    description: Operations about policy
  - name: partMiddle
    description: Operations about part
  - name: peritageMiddle
    description: Operations about peritage
paths:

  /users:
    post:
      tags:
        - userMiddle
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      tags:
        - userMiddle
      summary: Get user by ID
      description: ''
      operationId: getUserById
      parameters:
        - in: path
          name: id
          description: 'The id that needs to be fetched. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    delete:
      tags:
        - userMiddle
      summary: Delete user by id
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
    put:
      tags:
        - userMiddle
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation

  /polizyes:
    get:
      tags:
        - policyMiddle
      summary: Find policy by dni
      description: Returns a single policy
      operationId: getPolicyByDni
      parameters:
        - name: tomadorDni
          in: query
          description: filter tomadorDni
          schema:
            type: string
        - name: benefitDni
          in: query
          description: filter benefitDni
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '400':
          description: Invalid DNI supplied
        '404':
          description: Policy not found
    post:
      tags:
        - policyMiddle
      summary: create a policy for a user
      description: create a new policy in the bbdd
      operationId: createPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
      responses:
        '200':
          description: successful operation - poliza creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '405':
          description: Invalid input

  /polizyes/types:
    get:
      tags:
        - policyMiddle
      summary: Finds types of police
      description: return types
      operationId: findTypesOfPolicy
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyTypes'

  /polizyes/{idPolicy}/parts/{idPart}/peritage:
    post:
      tags:
        - partMiddle
      summary: execute peritage action to part
      description: execute peritage action to part
      operationId: doPeritageAction
      parameters:
        - name: idPolicy
          in: path
          description: idPoliza of part that needs to be fetched
          required: true
          schema:
            type: string
        - name: idPart
          in: path
          description: idPart that needs to be fetched
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Peritage'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Peritage'

  /vehicles:
    get:
      tags:
        - vehicleMiddle
      summary: Find vehicle by dniPropietario
      description: returns vehicles by dniPropietario
      operationId: getVehicleByDni
      parameters:
        - name: dniPropietario
          in: query
          description: dniPropietario of vehicles that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Invalid dniPropietario supplied
        '404':
          description: Vehicle not found
    post:
      tags:
        - vehicleMiddle
      summary: crea un nuevo vehiculo
      description: vehicles
      operationId: createVehicle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '405':
          description: Invalid input

  /vehicles/{id}:
    get:
      tags:
        - vehicleMiddle
      summary: Find vehicles by id
      description: returns vehicles by id
      operationId: getVehiclesById
      parameters:
        - name: id
          in: path
          description: vehicle id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'

  /polizyes/{idPoliza}/parts:
    post:
      tags:
        - policyMiddle
      parameters:
        - name: idPoliza
          in: path
          description: idPoliza of part that needs to be fetched
          required: true
          schema:
            type: string
      summary: Place a part for a policy
      description: Place a new part in the policy?
      operationId: savePart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Part'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '405':
          description: Invalid input

  /users/{benefitDni}/parts:
    get:
      tags:
        - partMiddle
      summary: Get parts by benefitDni
      description: ''
      operationId: getPartsByDni
      parameters:
        - name: benefitDni
          in: path
          description: '¿?-¿?'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Part'
        '400':
          description: Invalid benefitDni supplied
        '404':
          description: part not found

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        dni:
          type: string
          example: 11111111A
        name:
          type: string
          example: trabajo
        surName:
          type: string
          example: final master
        address:
          type: string
          example: C/estomismo 11 9b
        iban:
          type: string
          example: ES25 5555 9666 5566 5566 5566
        email:
          type: string
          example: pruebas@yahoo.es
        password:
          type: string
          example: 12345Aa$
        phone:
          type: string
          example: 666 66 66 66
        birthday:
          type: string
          format: Date <'m-d-Y'>
        ciudad:
          type: string
        pais:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Rol'
      required:
        - dni
        - name
        - surname
        - iban
        - email
        - birthday
        - address
        - password
        - phone

    Rol:
      type: object
      properties:
        id:
          type: integer
        nombre:
          type: string

    Policy:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        userDni:
          type: string
        benefitDni:
          type: string
        type:
          type: string
          description: policy type
          enum:
            - fullrisk
            - thirds
        vehicle:
          type: string

    PolicyTypes:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Vehicle:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        marca:
          type: string
          description: marca del vehiculo
          example: hyundai , bmw , ford...
        modelo:
          type: string
          description: modelo del coche
          example: Santafe , x5 , mustang...
        fechaMatriculacion:
          type: string
          format: date
          example: 2023-12-23
        matricula:
          type: string
        kilometros:
          type: integer
        userId:
          type: integer
      required:
        - marca
        - modelo
        - userId
        - fechaMatriculacion
        - matricula
        - kilometros

    Part:
      type: object
      properties:
        id:
          type: integer
          format: int64
        benefitDni:
          type: string
        affectedDni:
          type: string
        policyId:
          type: integer
          format: int64
        addInfo:
          type: string
        pay:
          type: boolean
      required:
        - benefitDni
        - affectedDni
        - policyId

    Peritage:
      type: object
      properties:
        idPart:
          type: integer
        idDecission:
          type: integer
        information:
          type: string
      required:
        - idPart
        - idDecission

    Decission:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string


    ErrorMessage:
      type: object
      properties:
        statusCode:
          type: integer
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        description:
          type: string